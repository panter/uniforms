(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{101:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return b})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return o})),n.d(t,"default",(function(){return c}));var a=n(3),r=n(7),i=(n(0),n(177)),b={id:"api-helpers",title:"Helpers"},l={unversionedId:"api-helpers",id:"api-helpers",isDocsHomePage:!1,title:"Helpers",description:"connectField(component[, options])",source:"@site/../docs/api-helpers.md",slug:"/api-helpers",permalink:"/docs/api-helpers",version:"current",sidebar:"docs",previous:{title:"Context data",permalink:"/docs/api-context-data"},next:{title:"AutoField algorithm",permalink:"/docs/uth-autofield-algorithm"}},o=[{value:"<code>connectField(component[, options])</code>",id:"connectfieldcomponent-options",children:[{value:"Field kinds",id:"field-kinds",children:[]}]},{value:"<code>changedKeys(root, valueA, valueB)</code>",id:"changedkeysroot-valuea-valueb",children:[]},{value:"<code>filterDOMProps(props)</code>",id:"filterdompropsprops",children:[]},{value:"<code>filterDOMProps.register(propA, propB, propC ...)</code>",id:"filterdompropsregisterpropa-propb-propc-",children:[]},{value:"<code>filterDOMProps.registered</code>",id:"filterdompropsregistered",children:[]},{value:"<code>joinName([null, ] nameA, nameB, nameC, ...)</code>",id:"joinnamenull--namea-nameb-namec-",children:[]},{value:"<code>randomIds([prefix])</code>",id:"randomidsprefix",children:[]}],d={toc:o};function c(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"connectfieldcomponent-options"},Object(i.b)("inlineCode",{parentName:"h2"},"connectField(component[, options])")),Object(i.b)("p",null,"Provides form management related props."),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"connectField")," helper is a component wrapper, that provides various props related to the form management.\nIt also adds the 'Field' suffix to the name of the wrapped component."),Object(i.b)("p",null,"The table below lists all of the ",Object(i.b)("strong",{parentName:"p"},"guaranteed")," props that will be passed to the wrapped component:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:"center"},"Name"),Object(i.b)("th",{parentName:"tr",align:"center"},"Type"),Object(i.b)("th",{parentName:"tr",align:"center"},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"changed")),Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"bool")),Object(i.b)("td",{parentName:"tr",align:"center"},"Has field changed?")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"disabled")),Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"bool")),Object(i.b)("td",{parentName:"tr",align:"center"},"Is field disabled?")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"error")),Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"object")),Object(i.b)("td",{parentName:"tr",align:"center"},"Field scoped part of validation error.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"errorMessage")),Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"string")),Object(i.b)("td",{parentName:"tr",align:"center"},"Field scoped validation error message.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"field")),Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"object")),Object(i.b)("td",{parentName:"tr",align:"center"},"Field definition from schema.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"fields")),Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"arrayOf(string)")),Object(i.b)("td",{parentName:"tr",align:"center"},"Subfields names.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"fieldType")),Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"func")),Object(i.b)("td",{parentName:"tr",align:"center"},"Field type.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"id")),Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"string")),Object(i.b)("td",{parentName:"tr",align:"center"},"Field id - given or random.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"label")),Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"string")),Object(i.b)("td",{parentName:"tr",align:"center"},"Field label.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"name")),Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"string")),Object(i.b)("td",{parentName:"tr",align:"center"},"Field name.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"onChange")),Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"func(value, [name])")),Object(i.b)("td",{parentName:"tr",align:"center"},"Change field value.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"placeholder")),Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"string")),Object(i.b)("td",{parentName:"tr",align:"center"},"Field placeholder.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"readOnly")),Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"bool")),Object(i.b)("td",{parentName:"tr",align:"center"},"Is field read-only?")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"showInlineError")),Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"boolean")),Object(i.b)("td",{parentName:"tr",align:"center"},"Show inline error?")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"value")),Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"any")),Object(i.b)("td",{parentName:"tr",align:"center"},"Field value.")))),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"connectField")," function accepts two arguments: the first one is a component and the second one is an options object."),Object(i.b)("p",null,"The table below lists all available options:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:"center"},"Name"),Object(i.b)("th",{parentName:"tr",align:"center"},"Type"),Object(i.b)("th",{parentName:"tr",align:"center"},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"initialValue")),Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"bool")),Object(i.b)("td",{parentName:"tr",align:"center"},"Initial value check. If ",Object(i.b)("inlineCode",{parentName:"td"},"true"),", then after the first render the default value is set as value if no value is provided (",Object(i.b)("inlineCode",{parentName:"td"},"undefined"),").")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"kind")),Object(i.b)("td",{parentName:"tr",align:"center"},Object(i.b)("inlineCode",{parentName:"td"},"'leaf'")," or ",Object(i.b)("inlineCode",{parentName:"td"},"'node'")),Object(i.b)("td",{parentName:"tr",align:"center"},"See ",Object(i.b)("a",{parentName:"td",href:"#field-kinds"},"Field kinds"),".")))),Object(i.b)("h3",{id:"field-kinds"},"Field kinds"),Object(i.b)("p",null,"Every field is either a ",Object(i.b)("em",{parentName:"p"},"leaf")," or ",Object(i.b)("em",{parentName:"p"},"node")," field. In the future, we could introduce new kinds to enable even more optimizations."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"Leaf")," fields cannot have subfields. This allows us to perform some optimizations, like skipping the extra ",Object(i.b)("inlineCode",{parentName:"li"},"Provider")," from ",Object(i.b)("inlineCode",{parentName:"li"},"connectField"),", effectively reducing the overhead down to a single ",Object(i.b)("inlineCode",{parentName:"li"},"useField")," call.",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"It includes all input fields, like ",Object(i.b)("inlineCode",{parentName:"li"},"NumField"),", ",Object(i.b)("inlineCode",{parentName:"li"},"SelectField")," or ",Object(i.b)("inlineCode",{parentName:"li"},"TextField"),"."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"Node")," fields can have subfields. Fields of the ",Object(i.b)("em",{parentName:"li"},"leaf")," kind cannot have subfields.",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"It includes all combined and layout fields, like ",Object(i.b)("inlineCode",{parentName:"li"},"ListField")," or ",Object(i.b)("inlineCode",{parentName:"li"},"NestField"),".")))),Object(i.b)("p",null,"If you are not sure which one to use, do not use the ",Object(i.b)("inlineCode",{parentName:"p"},"kind")," option at all - it'll default to the safest option (right now it's ",Object(i.b)("inlineCode",{parentName:"p"},"node"),")."),Object(i.b)("h2",{id:"changedkeysroot-valuea-valueb"},Object(i.b)("inlineCode",{parentName:"h2"},"changedKeys(root, valueA, valueB)")),Object(i.b)("p",null,"Returns an array of changed keys between ",Object(i.b)("inlineCode",{parentName:"p"},"valueA")," and ",Object(i.b)("inlineCode",{parentName:"p"},"valueB"),", where ",Object(i.b)("inlineCode",{parentName:"p"},"root")," is the root key."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"import { changedKeys } from 'uniforms';\n\nconst arrayOfChangedKeys = changedKeys(root, valueA, valueB);\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Note:")," For more examples, see ",Object(i.b)("inlineCode",{parentName:"p"},"changedKeys")," ",Object(i.b)("a",{parentName:"p",href:"https://github.com/vazco/uniforms/blob/master/packages/uniforms/__tests__/changedKeys.ts"},"tests"),"."),Object(i.b)("h2",{id:"filterdompropsprops"},Object(i.b)("inlineCode",{parentName:"h2"},"filterDOMProps(props)")),Object(i.b)("p",null,"Removes all uniforms-related props."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"import { filterDOMProps } from 'uniforms';\n\nconst nonUniformsProps = filterDOMProps(props);\n")),Object(i.b)("h2",{id:"filterdompropsregisterpropa-propb-propc-"},Object(i.b)("inlineCode",{parentName:"h2"},"filterDOMProps.register(propA, propB, propC ...)")),Object(i.b)("p",null,"Registers additional props to be filtered."),Object(i.b)("p",null,"If you want to filter additional props, then you have to register it."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"import { filterDOMProps } from 'uniforms';\n\nfilterDOMProps.register(propA, propB, propC /* ... */);\n")),Object(i.b)("h2",{id:"filterdompropsregistered"},Object(i.b)("inlineCode",{parentName:"h2"},"filterDOMProps.registered")),Object(i.b)("p",null,"Returns an array containing already registered props."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"import { filterDOMProps } from 'uniforms';\n\nfilterDOMProps.register(propA, propB, propC /* ... */);\nfilterDOMProps.registered; // ['propA', 'propB', ...]\n")),Object(i.b)("h2",{id:"joinnamenull--namea-nameb-namec-"},Object(i.b)("inlineCode",{parentName:"h2"},"joinName([null, ] nameA, nameB, nameC, ...)")),Object(i.b)("p",null,"Safely joins partial field names. When the first param is null, returns an array. Otherwise, returns a string."),Object(i.b)("p",null,"If you create a custom field with subfields, then it's better to use this helper."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"import { joinName } from 'uniforms';\n\nconst joinedNameArray = joinName(null, nameA, nameB, nameC /* ... */);\nconst joinedNameString = joinName(nameA, nameB, nameC /* ... */);\n")),Object(i.b)("h2",{id:"randomidsprefix"},Object(i.b)("inlineCode",{parentName:"h2"},"randomIds([prefix])")),Object(i.b)("p",null,"Generates random ID, based on given prefix. (",Object(i.b)("em",{parentName:"p"},"It's rather an internal helper, but it's still exported."),")"),Object(i.b)("p",null,"Use it, if you want to have some random but deterministic strings. If no prefix is provided, the 'uniforms' prefix will be applied."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"import { randomIds } from 'uniforms';\n\nconst predictableRandomIdGenerator = randomIds(prefix);\n\nconst predictableRandomIdA = predictableRandomIdGenerator();\nconst predictableRandomIdB = predictableRandomIdGenerator();\n")))}c.isMDXComponent=!0}}]);